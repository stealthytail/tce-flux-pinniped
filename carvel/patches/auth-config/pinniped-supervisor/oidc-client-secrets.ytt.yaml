#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
---
apiVersion: v1
kind: Secret
metadata:
  name: dex-client-credentials
  namespace: pinniped-supervisor
type: secrets.pinniped.dev/oidc-client
stringData:
  clientID: #@ data.values.dex_client_id
  clientSecret: #@ data.values.dex_client_secret

---
apiVersion: idp.supervisor.pinniped.dev/v1alpha1
kind: OIDCIdentityProvider
metadata:
  name: dex
  namespace: pinniped-supervisor
spec:
  issuer: #@ "https://" + data.values.dex_host
  authorizationConfig:
    additionalScopes: [offline_access, groups, email]
    #! If you would also like to allow your end users to authenticate using
    #! a password grant, then change this to true.
    #! Password grants with Dex will only work in Dex versions that include
    #! this bug fix: https://github.com/dexidp/dex/pull/2234
    allowPasswordGrant: false
  #! Specify how Dex claims are mapped to Kubernetes identities.
  claims:
    username: email
    #! Specify the name of the claim in your Dex ID token that represents the groups
    #! that the user belongs to. This matches what you specified above
    #! with the Groups claim filter.
    #! Note that the group claims from Github are in the format of "org:team".
    #! To query for the group scope, you should set the organization you want Dex to
    #! search against in its configuration, otherwise your group claim would be empty.
    #! An example config can be found at - https://dexidp.io/docs/connectors/github/#configuration
    groups: groups
  #! Specify the name of the Kubernetes Secret that contains your Dex
  #! application's client credentials (created below).
  client:
    secretName: dex-client-credentials
  #@ if/end data.values.dex_tls:
  tls:
    certificateAuthorityData: #@ base64.encode( data.values.dex_tls.crt )
